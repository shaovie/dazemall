<?php

class JsCssFactory
{
    private static $_MAP_PATH = __DIR__ . DIRECTORY_SEPARATOR . 'map.json';
    private static $_JS_PATH = __DIR__ . DIRECTORY_SEPARATOR . 'js_map.php';
    private static $_CSS_PATH = __DIR__ . DIRECTORY_SEPARATOR . 'css_map.php';
    private static $_jsConfigArray = array();
    private static $_cssConfigArray = array();

    private static function loadConfig()
    {
        $content = file_get_contents(self::$_MAP_PATH);
        $json = json_decode($content, true);
        if (null != $json) {
            if (isset($json['pkg'])) {
                foreach ($json['pkg'] as $package) {
                    if (isset($package['uri']) && isset($package['has']) && isset($package['type'])) {
                        if ('js' == $package['type']) {
                            self::fill($package['has'], $package['uri'], self::$_jsConfigArray);
                        } else {
                            self::fill($package['has'], $package['uri'], self::$_cssConfigArray);
                        }
                    }
                }
            }

            if (isset($json['res'])) {
                foreach ($json['res'] as $key => $package) {
                    if ('js' == $package['type']) {
                        if (!isset(self::$_jsConfigArray[$key])) {
                            self::fill(array($key), $package['uri'], self::$_jsConfigArray);
                        }
                    } else {
                        if (!isset(self::$_cssConfigArray[$key])) {
                            self::fill(array($key), $package['uri'], self::$_cssConfigArray);
                        }
                    }

                }
            }
        }
    }

    private static function fill(array $dataArray, $uri, array &$out)
    {
        foreach ($dataArray as $v) {
            $out[$v] = $uri;
        }
    }

    private static function createFile($filePath, array $dataArray)
    {
        $fp = @fopen($filePath, "wb+");
        if (!$fp) {
            echo "can not create file({$filePath})\n";
            exit(-1);
        }

        fwrite($fp, "<?php\n\n");
        fwrite($fp, "// DO NOT EDIT THIS FILE.\n\n");
        fwrite($fp, "   return array(\n");
        foreach ($dataArray as $key => $value) {
            fwrite($fp, "               '{$key}'   => '{$value}', \n");
        }
        fwrite($fp, "               );\n");
        fclose($fp);
    }

    private static function testIncludeFile($filePath)
    {
        $dataArray = include($filePath);
        return (!empty($dataArray));
    }

    public static function createJsCssFiles()
    {
        self::loadConfig();
        self::createFile(self::$_JS_PATH, self::$_jsConfigArray);
        echo "create js file ok.\n";
        self::testIncludeFile(self::$_JS_PATH);
        echo "test js file OK.\n";

        self::createFile(self::$_CSS_PATH, self::$_cssConfigArray);
        echo "create css file ok.\n";
        self::testIncludeFile(self::$_CSS_PATH);
        echo "test css file OK.\n";
    }
}

JsCssFactory::createJsCssFiles();
